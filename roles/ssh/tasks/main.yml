- name: Is ssh responding
  ignore_errors: true
  ignore_unreachable: true
  local_action: wait_for host={{ansible_host}} port=22 delay={{ssh_delay}} connect_timeout=5 timeout={{ssh_timeout}}
  become: false
  delegate_to:  localhost
  connection: local
  register: ssh_con

- name: Scan Known host
  ignore_errors: true
  ignore_unreachable: true
  delegate_to: localhost
  become: false
  connection: local
  shell: host=$(ssh-keyscan -H {{ansible_host}} 2>&1|head -n 1|awk '{print $4}'|tr -s '-'|cut -d '-' -f 1); echo $host
  register: scan_known_host

- set_fact: 
    ssh_user: "{% if scan_known_host.stdout == 'Raspbian'%}{{pi_user}}{% else %}{{ubuntu_user}}{% endif %}"
  when: scan_known_host.stdout != 'or'

- set_fact: 
    ssh_pass: "{{vars[ssh_user + '_password']}}"
    ansible_ssh_user: "{{ssh_user}}"
    ansible_ssh_password: ""
    cacheable: no
  when: scan_known_host.stdout != 'or'

- name: Setup ssh host initial
  setup:
    gather_timeout: 3
  ignore_errors: true
  ignore_unreachable: true
  any_errors_fatal: false
  register: setup
  when: ssh_con.failed == false

- set_fact: 
    ansible_distribution: "{{setup.ansible_facts['ansible_distribution']}}"
    cacheable: no
  when: ansible_distribution is not defined   
- set_fact: 
    ansible_distribution: ""
    cacheable: no
  when: setup.unreachable is defined and setup.unreachable 

- debug:
    var: ansible_distribution, scan_known_host.stdout, ansible_ssh_user, ansible_ssh_password, ansible_user, ssh_user, ssh_pass, ssh_con
- debug:
    var: setup
  when: setup.msg is defined 

- name: Cleanup keygen
  ignore_errors: true
  become: false
  delegate_to: localhost
  connection: local
  register: cleanup_keygen
  shell: ssh-keygen -f "/home/{{lookup('env', 'USER')}}/.ssh/known_hosts" -R "{{ansible_host}}"
  when: > 
    scan_known_host.stdout is not defined and setup.unreachable is defined and setup.unreachable 
    or setup.msg is defined and setup.msg.find('REMOTE HOST IDENTIFICATION HAS CHANGED!') > -1
    or setup.msg is defined and setup.msg.find('Failed to connect to the host via ssh') > -1

- name: Trust new host
  delegate_to: localhost
  become: yes
  shell: ssh-keyscan -H {{ansible_host}} >> "/home/{{lookup('env', 'USER')}}/.ssh/known_hosts"
  register: trust_new_host
  when: cleanup_keygen.changed

- name: Remove Known hosts old
  delegate_to: localhost
  become: false
  connection: local
  register: remove_old_host
  file:
     path: "/home/{{lookup('env', 'USER')}}/.ssh/known_hosts.old"
     state: absent
  when: trust_new_host.changed

- name: Update and upgrade apt packages
  delegate_to: localhost
  connection: local
  become: yes
  run_once: true
  apt:
    upgrade: "yes"
    update_cache: yes
    cache_valid_time: 86400
  when: setup.unreachable is defined and setup.unreachable 

- name: Install packages
  delegate_to: localhost
  connection: local
  become: yes
  run_once: true
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
    - sshpass
  when: setup.unreachable is defined and setup.unreachable 
  
- name: check .ssh local directory exists
  delegate_to: localhost
  connection: local
  become: false
  run_once: true
  stat:
    path: "~/.ssh"
  register: ssh_directory_exists_check
  when: setup.unreachable is defined and setup.unreachable 
  
- name: Check needed OS tools exist
  delegate_to: localhost
  connection: local
  become: false
  run_once: true
  shell: which sshpass ssh-keygen ssh-copy-id
  register: os_tools_exist
  ignore_errors: true
  when: setup.unreachable is defined and setup.unreachable 

- name: Fail execution if any of the needed OS tools is missing
  run_once: true
  fail:
    msg: "One or more of the: sshpass, ssh-keygen, ssh-copy-id are missing on this machine. Please install them - using your distribution's recommended method - before continuing."
  when: setup.unreachable is defined and setup.unreachable and os_tools_exist.rc != 0

- name: create ~/.ssh local directory
  delegate_to: localhost
  connection: local
  become: false
  run_once: true
  file:
    path: "~/.ssh"
    state: directory
    mode: "0700"
  register: ssh_directory_creation
  when: setup.unreachable is defined and setup.unreachable and ssh_directory_exists_check is defined and ssh_directory_exists_check.stat.exists == false

- name: check .ssh key file exists
  delegate_to: localhost
  connection: local
  become: false
  run_once: true
  stat:
    path: "~/.ssh/{{item}}"
  register: ssh_key_file_exists_check
  with_items:
    - "id_rsa"
    - "id_rsa.pub"
  when: setup.unreachable is defined and setup.unreachable 

- name: generate ssh key on local machine
  delegate_to: localhost
  connection: local
  become: false
  run_once: true
  shell: "ssh-keygen -t rsa -f /home/{{lookup('env', 'USER')}}/.ssh/id_rsa -P ''"
  register: ssh_key_creation
  failed_when: ssh_key_creation.rc != 0
  when: setup.unreachable is defined and setup.unreachable and ssh_key_file_exists_check is defined and ssh_key_file_exists_check.results[0].stat.exists == false and ssh_key_file_exists_check.results[1].stat.exists == false

- name: check .ssh/config file exists
  delegate_to: localhost
  connection: local
  become: false
  run_once: true
  stat:
    path: "~/.ssh/config"
  register: ssh_config_file_exists_check
  when: setup.unreachable is defined and setup.unreachable 

- name: create the ~/.ssh/config file
  delegate_to: localhost
  connection: local
  become: false
  run_once: true
  file:
    path: "~/.ssh/config"
    state: touch
    mode: "0644"
  register: ssh_config_file_creation
  when: setup.unreachable is defined and setup.unreachable and ssh_config_file_exists_check is defined and ssh_config_file_exists_check.stat.exists == false

- name: add the new ssh key to the ~/.ssh/config file
  delegate_to: localhost
  connection: local
  become: false
  run_once: true
  lineinfile:
    path: "~/.ssh/config"
    line: "IdentityFile ~/.ssh/id_rsa"
    state: present
    backup: yes
  register: ssh_config_file_key_addition
  when: setup.unreachable is defined and setup.unreachable and ssh_key_file_exists_check is defined and ssh_key_file_exists_check.results[0].stat.exists == false and ssh_key_file_exists_check.results[1].stat.exists == false

- name: Waiting for ssh
  local_action: wait_for host={{ ansible_host }} port=22 delay=1 connect_timeout=5 state=present timeout={{ssh_timeout}}
  become: false
  delegate_to: localhost
  delegate_facts: true
  when: setup.unreachable is defined and setup.unreachable 

- name: Distribute the ssh key to the remote hosts
  delegate_to: localhost
  become: false
  ignore_errors: true
  connection: local
  shell: "sshpass -p {{ssh_pass}} ssh-copy-id -i /home/{{ lookup('env', 'USER') }}/.ssh/id_rsa.pub {{ssh_user}}@{{ ansible_host }} -f"
  register: ssh_copy_id_execution
  failed_when: ssh_copy_id_execution.rc != 0
  when: setup.unreachable is defined and setup.unreachable 

- debug:
    var: ssh_copy_id_execution

- name: Wait for Retry
  connection: local
  delegate_to: localhost
  become: false
  pause:
    seconds: 30
  when: setup.unreachable is defined and setup.unreachable and ssh_copy_id_execution.failed and (ssh_copy_id_execution.stderr_lines|length>0) and ssh_copy_id_execution.stderr_lines[1] ==  "Permission denied, please try again."

- name: Retry Distribute the ssh key to the remote hosts
  delegate_to: localhost
  become: false
  connection: local
  shell: "sshpass -p {{ssh_pass}} ssh-copy-id -i /home/{{lookup('env', 'USER')}}/.ssh/id_rsa.pub {{ssh_user}}@{{ ansible_host }} -f"
  register: ssh_copy_id_execution
  failed_when: ssh_copy_id_execution.rc != 0
  when: setup.unreachable is defined and setup.unreachable and ssh_copy_id_execution.failed and ssh_copy_id_execution.stderr_lines[1] ==  "Permission denied, please try again."

- debug:
    var: ssh_copy_id_execution

- name: Ping
  vars: 
    ansible_password: ""
  ping:
  when: ssh_ping

- name: Setup ssh hosts after sshpass
  vars:
    ansible_password: ""
  setup:
    gather_timeout: 3
  ignore_errors: true
  ignore_unreachable: true
  register: setup
  when: setup_ssh_after_sshpass

- set_fact: 
    ansible_distribution: "{{setup.ansible_facts['ansible_distribution']}}"
    cacheable: no
  failed_when: ansible_distribution is not defined
  when: setup_ssh_after_sshpass

- debug:
    var: ansible_distribution, scan_known_host.stdout, ansible_ssh_user, ansible_user, ssh_user, ansible_host, ssh_con