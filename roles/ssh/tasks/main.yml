- name: Update and upgrade apt packages
  delegate_to: localhost
  connection: local
  become: yes
  run_once: true
  apt:
    upgrade: "yes"
    update_cache: yes
    cache_valid_time: 86400

- name: Install packages
  delegate_to: localhost
  connection: local
  become: yes
  run_once: true
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
    - sshpass

- name: check .ssh local directory exists
  delegate_to: localhost
  connection: local
  become: false
  run_once: true
  stat:
    path: "~/.ssh"
  register: ssh_directory_exists_check

- name: Check needed OS tools exist
  delegate_to: localhost
  connection: local
  become: false
  run_once: true
  shell: which sshpass ssh-keygen ssh-copy-id
  register: os_tools_exist
  ignore_errors: true

- name: Fail execution if any of the needed OS tools is missing
  run_once: true
  fail:
    msg: "One or more of the: sshpass, ssh-keygen, ssh-copy-id are missing on this machine. Please install them - using your distribution's recommended method - before continuing."
  when: os_tools_exist.rc != 0

- name: create ~/.ssh local directory
  delegate_to: localhost
  connection: local
  become: false
  run_once: true
  file:
    path: "~/.ssh"
    state: directory
    mode: "0700"
  register: ssh_directory_creation
  when: ssh_directory_exists_check is defined and ssh_directory_exists_check.stat.exists == false

- name: check .ssh key file exists
  delegate_to: localhost
  connection: local
  become: false
  run_once: true
  stat:
    path: "~/.ssh/{{item}}"
  register: ssh_key_file_exists_check
  with_items:
    - "id_rsa"
    - "id_rsa.pub"

- name: generate ssh key on local machine
  delegate_to: localhost
  connection: local
  become: false
  run_once: true
  shell: "ssh-keygen -t rsa -f /home/{{ansible_user}}/.ssh/id_rsa -P ''"
  register: ssh_key_creation
  failed_when: ssh_key_creation.rc != 0
  when: ssh_key_file_exists_check is defined and ssh_key_file_exists_check.results[0].stat.exists == false and ssh_key_file_exists_check.results[1].stat.exists == false

- name: check .ssh/config file exists
  delegate_to: localhost
  connection: local
  become: false
  run_once: true
  stat:
    path: "~/.ssh/config"
  register: ssh_config_file_exists_check

- name: create the ~/.ssh/config file
  delegate_to: localhost
  connection: local
  become: false
  run_once: true
  file:
    path: "~/.ssh/config"
    state: touch
    mode: "0644"
  register: ssh_config_file_creation
  when: ssh_config_file_exists_check is defined and ssh_config_file_exists_check.stat.exists == false

- name: add the new ssh key to the ~/.ssh/config file
  delegate_to: localhost
  connection: local
  become: false
  run_once: true
  lineinfile:
    path: "~/.ssh/config"
    line: "IdentityFile ~/.ssh/id_rsa"
    state: present
    backup: yes
  register: ssh_config_file_key_addition
  when: ssh_key_file_exists_check is defined and ssh_key_file_exists_check.results[0].stat.exists == false and ssh_key_file_exists_check.results[1].stat.exists == false

- name: Cleanup keygen
  ignore_errors: true
  become: false
  delegate_to: localhost
  connection: local
  shell: ssh-keygen -f "/home/{{ansible_user}}/.ssh/known_hosts" -R "{{ansible_host}}"

- name: Remove Known hosts old
  delegate_to: localhost
  become: false
  connection: local
  file:
     path: "/home/{{ansible_user}}/.ssh/known_hosts.old"
     state: absent

- name: Waiting for ssh
  local_action: wait_for host={{ ansible_host }} port=22 delay=2 connect_timeout=2
  become: false
  delegate_to: localhost
  delegate_facts: true
  register: ssh_con
  
- debug:
    var: ssh_con

- name: Known host
  delegate_to: localhost
  become: false
  connection: local
  shell: ssh-keyscan -H {{ansible_host}} >> /home/{{ansible_user}}/.ssh/known_hosts

- name: Wait
  pause:
    seconds: 30
    
- name: Distribute the ssh key to the remote hosts
  delegate_to: localhost
  become: false
  ignore_errors: true
  connection: local
  shell: "sshpass -p {{ssh_pass}} ssh-copy-id -i /home/{{ansible_user}}/.ssh/id_rsa.pub {{ssh_user}}@{{ ansible_host }} -f -o StrictHostKeyChecking=no"
  register: ssh_copy_id_execution
  failed_when: ssh_copy_id_execution.rc != 0

- debug:
    var: ssh_copy_id_execution

- name: Wait
  pause:
    seconds: 30
  when: ssh_copy_id_execution.failed and ssh_copy_id_execution.stderr_lines[1] ==  "Permission denied, please try again."

- name: Retry Distribute the ssh key to the remote hosts
  delegate_to: localhost
  become: false
  ignore_errors: true
  connection: local
  shell: "sshpass -p {{ssh_pass}} ssh-copy-id -i /home/{{ansible_user}}/.ssh/id_rsa.pub {{ssh_user}}@{{ ansible_host }} -f -o StrictHostKeyChecking=no"
  register: ssh_copy_id_execution
  failed_when: ssh_copy_id_execution.rc != 0
  when: ssh_copy_id_execution.failed and ssh_copy_id_execution.stderr_lines[1] ==  "Permission denied, please try again."

- debug:
    var: ssh_copy_id_execution

- name: Ping
  ping: