- debug:
    var: ansible_distribution, ssh_delay, ssh_timeout

- name: Is ssh responding
  ignore_errors: true
  ignore_unreachable: true
  local_action: wait_for host={{ansible_host}} port=22 delay={{ssh_delay}} connect_timeout=5 timeout={{ssh_timeout}}
  become: false
  delegate_to:  localhost
  connection: local
  register: ssh_con

- name: SSH key scan known host
  ignore_errors: true
  ignore_unreachable: true
  delegate_to: localhost
  become: false
  connection: local
  shell:  ssh-keyscan -t rsa,ecdsa -T5 {{item}}  #host=$(ssh-keyscan -H {{item}} 2>&1|head -n 1|awk '{print $4}'|tr -s '-'|cut -d '-' -f 1); echo $host
  register: scan_known_host
  with_items:
    - "{{inventory_hostname}}"
    - "{{ansible_host}}"
  when: ssh_con.failed == false
  changed_when: false

- set_fact:
    current_known_distribution: "{% if scan_known_host.results | map(attribute='stderr') is search('Raspbian') %}Debian{% elif scan_known_host.results | map(attribute='stderr') is search('Ubuntu')%}Ubuntu{%else%}{% endif %}"
    ssh_user: "{% if scan_known_host.results | map(attribute='stderr')  is search('Raspbian') %}{{pi_user}}{% else %}{{ubuntu_user}}{% endif %}"
  register: set_ssh_user
  when: ssh_con.failed == false

- name: Clean known hosts
  delegate_to: localhost
  become: yes
  register: clean_ssh_keys
  lineinfile:
    name: "{{lookup('env', 'HOME')}}/.ssh/known_hosts"
    regexp: "{{item}}"
    state: absent
  when: > 
    clean
  with_items: 
    - "{{ ansible_host }}"
    - "{{inventory_hostname}}"
  until: clean_ssh_keys.changed == false

- name: Trust new host
  delegate_to: localhost
  become: yes
  register: add_ssh_keys
  lineinfile:
    name: "{{lookup('env', 'HOME')}}/.ssh/known_hosts"
    line: "{{item}}"
    create: yes
  when: > 
    current_known_distribution is defined
    and ssh_con.failed == false
    and current_known_distribution == distribution
    and current_known_distribution != ""
    or clean
  with_items: "{{ scan_known_host.results | map(attribute='stdout_lines') |default([]) }}"

- set_fact: 
    ssh_pass: "{{vars[ssh_user + '_password']}}"
    ansible_ssh_user: "{{ssh_user}}"
    ansible_ssh_password: ""
    cacheable: no
  when: set_ssh_user.skipped is not defined

- set_fact: 
    ansible_distribution: "{{current_known_distribution}}"
    cacheable: no
  when: >
    ansible_distribution is not defined   
    and clean == false

- debug:
    var: ansible_distribution, current_known_distribution, ansible_ssh_user, ansible_ssh_password, ansible_user, ssh_user, ssh_pass, ssh_con

- name: Update and upgrade apt packages
  delegate_to: localhost
  connection: local
  become: yes
  run_once: true
  apt:
    upgrade: "yes"
    update_cache: yes
    cache_valid_time: 86400
  when: ssh_con.failed

- name: Install packages
  delegate_to: localhost
  connection: local
  become: yes
  run_once: true
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
    - sshpass
  when: ssh_con.failed
  
- name: check .ssh local directory exists
  delegate_to: localhost
  connection: local
  become: false
  run_once: true
  stat:
    path: "{{lookup('env', 'HOME')}}/.ssh"
  register: ssh_directory_exists_check
  
- name: create ~/.ssh local directory
  delegate_to: localhost
  connection: local
  become: false
  run_once: true
  file:
    path: "{{lookup('env', 'HOME')}}/.ssh"
    state: directory
    mode: "0700"
  register: ssh_directory_creation
  when: ssh_directory_exists_check is defined
    and ssh_directory_exists_check.stat.exists == false

- name: check .ssh key file exists
  delegate_to: localhost
  connection: local
  become: false
  run_once: true
  stat:
    path: "{{lookup('env', 'HOME')}}/.ssh/{{item}}"
  register: ssh_key_file_exists_check
  with_items:
    - "id_rsa"
    - "id_rsa.pub"

- name: generate ssh key on local machine
  delegate_to: localhost
  connection: local
  become: false
  run_once: true
  shell: "ssh-keygen -t rsa -f {{lookup('env', 'HOME')}}/.ssh/id_rsa -P ''"
  register: ssh_key_creation
  failed_when: ssh_key_creation.rc != 0
  when: ssh_key_file_exists_check is defined 
    and ssh_key_file_exists_check.results[0].stat.exists == false
    and ssh_key_file_exists_check.results[1].stat.exists == false

- name: check .ssh/config file exists
  delegate_to: localhost
  connection: local
  become: false
  run_once: true
  stat:
    path: "{{lookup('env', 'HOME')}}/.ssh/config"
  register: ssh_config_file_exists_check

- name: create the ~/.ssh/config file
  delegate_to: localhost
  connection: local
  become: false
  run_once: true
  file:
    path: "{{lookup('env', 'HOME')}}/.ssh/config"
    state: touch
    mode: "0644"
  register: ssh_config_file_creation
  when: ssh_config_file_exists_check is defined and ssh_config_file_exists_check.stat.exists == false

- name: add the new ssh key to the ~/.ssh/config file
  delegate_to: localhost
  connection: local
  become: false
  run_once: true
  lineinfile:
    path: "{{lookup('env', 'HOME')}}/.ssh/config"
    line: "IdentityFile {{lookup('env', 'HOME')}}/.ssh/id_rsa"
    state: present
    backup: yes
  register: ssh_config_file_key_addition
  when: ssh_key_file_exists_check is defined and ssh_key_file_exists_check.results[0].stat.exists == false and ssh_key_file_exists_check.results[1].stat.exists == false

- name: Distribute the ssh key to the remote hosts
  delegate_to: localhost
  become: false
  connection: local
  shell: "sshpass -p {{ssh_pass}} ssh-copy-id -i {{lookup('env', 'HOME')}}/.ssh/id_rsa.pub {{ssh_user}}@{{ item }}"
  register: ssh_copy_id_execution
  failed_when: >
    'ERROR' in  ssh_copy_id_execution.stderr
    or 'ERROR' in ssh_copy_id_execution.stdout
  changed_when: >
    ssh_copy_id_execution.rc == 0
    and  "Number of key(s) added: 1" in ssh_copy_id_execution.stdout_lines
  when: > 
    current_known_distribution is defined
    and ssh_con.failed == false
    and current_known_distribution == distribution
    and current_known_distribution != ""
    and add_ssh_keys.changed
    or current_known_distribution == "" 
    and ssh_con.failed == false
    or ansible_distribution == "" 
    and ssh_con.failed == false
  with_items:
    # - "{{inventory_hostname}}"
    - "{{ansible_host}}"

- name: Ping
  vars: 
    ansible_password: ""
  ping:
  when: ssh_ping and ssh_con.failed == false

- name: Setup ssh hosts after sshpass
  vars:
    ansible_password: ""
  setup:
    gather_timeout: 3
  ignore_errors: true
  ignore_unreachable: true
  register: setup
  when: > 
    setup_ssh_after_sshpass 
    and current_known_distribution is defined 
    and current_known_distribution != ""

- set_fact: 
    ansible_distribution: "{{setup.ansible_facts['ansible_distribution']}}"
    ansible_ssh_user: "{{ansible_ssh_user | default(setup.ansible_facts['ansible_user_id'])}}"
    ansible_user: "{{ansible_user | default(setup.ansible_facts['ansible_user_id'])}}"
    ssh_user: "{{ssh_user | default(setup.ansible_facts['ansible_user_id'])}}"
    cacheable: no
  when: setup_ssh_after_sshpass and ssh_con.failed == false

- debug:
    var: ansible_distribution, current_known_distribution, ansible_ssh_user, ansible_user, ssh_user, ansible_host, ssh_con