- name: Flush dns cache
  delegate_to: localhost
  become: yes
  connection: local
  vars:
    ansible_become_pass: "{{localhost_ansible_become_pass}}"
  shell: dscacheutil -flushcache; sudo killall -HUP mDNSResponder

- name: Is ssh responding
  local_action: wait_for host={{ inventory_hostname | default(ansible_host) }} port=22 delay={{ssh_delay}} connect_timeout=1 timeout={{ssh_timeout}}
  become: false
  delegate_to:  localhost
  connection: local

- name: SSH key scan known host
  delegate_to: localhost
  become: false
  connection: local
  shell:  ssh-keyscan -T10 {{item}}  #host=$(ssh-keyscan -H {{item}} 2>&1|head -n 1|awk '{print $4}'|tr -s '-'|cut -d '-' -f 1); echo $host
  register: scan_known_host
  with_items:
    - "{{ansible_host | default(inventory_hostname)}}"
  changed_when: false

- debug:
    var: scan_known_host.results | map(attribute='stdout')
- debug:
    var: scan_known_host.results | map(attribute='stderr')
- debug:
    var: scan_known_host.results | map(attribute='stderr') is search("# {{ansible_host | default(inventory_hostname)}}:22")
- debug:
    var: scan_known_host.results | map(attribute='stderr') is search("# {{inventory_hostname}}:22")

- name: Set current known distribution
  set_fact:
    current_known_distribution: "{% if scan_known_host.results | map(attribute='stderr') is search('Raspbian') %}Debian{% elif scan_known_host.results | map(attribute='stderr') is search('Ubuntu')%}Ubuntu{% elif scan_known_host.results | map(attribute='stderr') is search(ansible_host| default(inventory_hostname))%}Archlinux{%else%}{% endif %}"

- name: Set user
  set_fact:
    ssh_user: "{{vars[current_known_distribution + '_user']}}"
  register: set_ssh_user
  when: current_known_distribution is defined
    and current_known_distribution != ''

- name: Set become pass
  set_fact:
    ssh_pass: "{{vars[ssh_user + '_password']}}"
    ansible_become_pass: "{{vars[ssh_user + '_password']}}"
    cacheable: no
  when: current_known_distribution is defined
    and current_known_distribution != ''
    
- name: Clean known hosts
  delegate_to: localhost
  connection: local
  vars:
    ansible_become_pass: "{{localhost_ansible_become_pass}}"
  become: yes
  register: clean_ssh_keys
  lineinfile:
    name: "{{lookup('env', 'HOME')}}/.ssh/known_hosts"
    regexp: "^{{item}}"
    state: absent
  with_items:
    - "{{inventory_hostname}}"
    # - "{{ansible_host | default()}}"
  until: clean_ssh_keys.changed == false
  when: clean

- name: Trust new host
  delegate_to: localhost
  become: yes
  register: add_ssh_keys
  lineinfile:
    name: "{{lookup('env', 'HOME')}}/.ssh/known_hosts"
    line: "{{item}}"
    create: yes
  with_items: "{{ scan_known_host.results | map(attribute='stdout_lines') |default([]) }}"
  when:
    current_known_distribution is defined
    and current_known_distribution != ""

- debug:
    var: ansible_distribution, current_known_distribution, ansible_ssh_user, ansible_ssh_password, ansible_user, ssh_user, ssh_pass

- debug:
    var: ansible_user, ssh_user, ansible_become_pass, ssh_pass

- name: Set ansible user to ssh user and no password
  set_fact:
    ansible_user: "{{ssh_user}}"
    ansible_ssh_user: "{{ssh_user}}"
    ansible_password: ""
    ansible_become_pass: ""
    ssh_pass: ""
    cacheable: no
  when: ssh_user is defined
  
- debug:
    var: ansible_user, ssh_user, ansible_become_pass, ssh_pass
  when: ssh_user is defined

- name: Ping
  ping:

- name: Setup ssh hosts after sshpass
  connection: ssh
  setup:
    gather_timeout: 3
  ignore_errors: true
  ignore_unreachable: true
  register: host_setup
  when: ssh_user is defined

- name: Set host facts
  set_fact:
    ansible_ssh_user: "{{ansible_ssh_user | default(host_setup.ansible_facts['ansible_user_id'])}}"
    ansible_user: "{{ansible_user | default(host_setup.ansible_facts['ansible_user_id'])}}"
    ssh_user: "{{ssh_user | default(host_setup.ansible_facts['ansible_user_id'])}}"
  when: ssh_user is defined
    and host_setup.skipped is not defined

- name: Set become pass
  set_fact:
    ansible_become_pass: "{{vars[ssh_user + '_password']}}"
    cacheable: no
  when: ssh_user is defined and ssh_user != ''

- debug:
    var: host_setup.ansible_facts['ansible_distribution'], host_setup.ansible_facts['ansible_user_id']

- debug:
    var: ansible_distribution, current_known_distribution, ansible_ssh_user, ansible_user, ssh_user, ansible_host,ansible_become_pass