
- name: Include distribution switch to RaspiOS
  vars:
    distribution: "Debian"
    distribution_ssh_delay: "{%if  ansible_distribution == ''%}30{%else%}5{%endif%}" 
    distribution_ssh_timeout: "{%if ansible_distribution == '' %}300{%else%}120{%endif%}"
    distribution_ssh_delay_initial: 0
    distribution_ssh_timeout_initial: 10
    distribution_setup_ssh_ping: true
    distribution_setup_ssh_after_sshpass_initial: true
    has_pxe: "{{pi_update_rom_has_pxe}}"
  include_role:
    name: distribution-switch

- name: Fix slow apt update
  vars:
    ansible_user: pi
  become: yes
  sysctl:
    name: "{{item}}"
    value: 1
    sysctl_set: yes
    state: present
    reload: yes
  with_items:
    - net.ipv6.conf.all.disable_ipv6
    - net.ipv6.conf.default.disable_ipv6
    - net.ipv6.conf.lo.disable_ipv6
  register: ip6

- name: Restart service networking
  vars:
    ansible_user: pi
  become: yes
  service:
    name: networking
    state: restarted
  when: ip6.changed

- name: Setup rpi-eeprom-update branch
  vars:
    ansible_user: pi
  become: yes
  lineinfile:
    path: /etc/default/rpi-eeprom-update
    line: 'FIRMWARE_RELEASE_STATUS="default"'
    regex: "FIRMWARE_RELEASE_STATUS="
    state: present

- name: Verify update required
  vars:
    ansible_user: pi
  become: yes
  shell: if rpi-eeprom-update | grep -q 'update required'; then echo 'true'; else echo 'false'; fi
  register: update_required_result
- set_fact: update_required={{ update_required_result.stdout }}

- debug:
    var: update_required, update

- name: 'Update and upgrade apt packages'
  vars:
    ansible_user: pi
  become: yes
  apt:
    upgrade: 'yes'
    update_cache: yes
    cache_valid_time: 86400
  register: apt_update
  when: update_required or force_update

- name: Verify update available
  vars:
    ansible_user: pi
  become: yes
  shell: if rpi-eeprom-update | grep -q 'update available'; then echo 'true'; else echo 'false'; fi
  register: update_available_result
  
- set_fact: update_available={{ update_available_result.stdout }}

- debug:
    var: update_available, update

- name: Extract bootconf
  vars:
    ansible_user: pi
  become: yes
  shell: rpi-eeprom-config > ./bootconf.txt

- name: Setup boot configuration
  vars:
    ansible_user: pi
  lineinfile:
    path: "./bootconf.txt"
    line: "{{item}}"
    regex: "{{item.split('=')[0]}}"
    state: present
  register: bootconf
  with_items:
   - "BOOT_ORDER={{boot_order}}"
   - "MAX_RESTARTS=1"
   - "SD_BOOT_MAX_RETRIES=1"
   - "NET_BOOT_MAX_RETRIES=1"
  
- name: Update ROM
  vars:
    ansible_user: pi
  become: yes
  shell: "{{item}}"
  with_items:
   - "rpi-eeprom-config --apply ./bootconf.txt"
  when: >
    update_available 
    or force_update 
    or bootconf.changed

- name: Include task list in play
  vars:
    ansible_user: pi
  include: reboot-task.yml
  when: > 
    update_available 
    or force_update 
    or bootconf.changed

