- set_fact: 
    current_user: "{{ansible_user}}"
- debug:
    var: current_user
# - pause:

- name: Check if kube confing exists for {{current_user}} user
  stat:
    path: "/home/{{current_user}}/.kube"
  register: kube

- debug:
    var: kube

- name: Create directory kubeconfig for {{current_user}} user
  command: "{{ item }}"
  become: false
  with_items:
    - mkdir -p "/home/{{current_user}}/.kube"
  when: not kube.stat.exists


# - name: Gather facts from {{groups['k8s_masters'][0]}}
#   ansible.builtin.setup:
#   delegate_to: "{{groups['k8s_masters'][0]}}"
#   connection: ssh
#   vars:
#     ansible_user: "root"
- name: Set control plane hostname
  set_fact:
    control_plane_hostname: "{{groups['control_plane'][0]}}"


- set_fact:
    # k8scmd: "kubeadm init --control-plane-endpoint='{{groups['control_plane'][0]}}.lan:6443' --upload-certs --pod-network-cidr=192.168.0.0/16 --apiserver-advertise-address='{{ansible_facts['all_ipv4_addresses'][0]}}' --apiserver-cert-extra-sans='{{groups['control_plane'][0]}}.lan' --node-name {{ inventory_hostname }}"
    k8scmd: "kubeadm init --control-plane-endpoint='{{control_plane_hostname}}.lan:6443' --apiserver-cert-extra-sans='{{control_plane_hostname}}.lan,localhost,127.0.0.1' --upload-certs --apiserver-advertise-address='{{hostvars[inventory_hostname]['ansible_facts']['eth0']['ipv4']['address']}}'  --node-name {{ inventory_hostname }} --pod-network-cidr=192.168.0.0/16 --cri-socket 'unix:///var/run/cri-dockerd.sock'"
    #k8scmd: "kubeadm init --control-plane-endpoint='{{groups['k8s_masters'][0]}}.lan:6443' --upload-certs --pod-network-cidr=192.168.0.0/16 --apiserver-advertise-address='{{hostvars[groups['k8s_masters'][0]]['ansible_default_ipv4']['address']}}' --apiserver-cert-extra-sans='k8s.lan' --node-name {{ inventory_hostname }}"
    # k8scmd: "kubeadm init --control-plane-endpoint='{{groups['control_plane'][0]}}.lan:6443' --upload-certs --pod-network-cidr=192.168.0.0/16 --node-name {{ inventory_hostname }}"
- debug: var=k8scmd
- name: "Initialize the Kubernetes cluster using kubeadm"
  become: yes
  run_once: 'yes'
  command: "{{k8scmd}}"
  when: not kube.stat.exists
  
- name: Setup kubeconfig for {{current_user}} user
  command: "{{ item }}"
  become: yes
  with_items:
    - "cp -i /etc/kubernetes/admin.conf /home/{{current_user}}/.kube/config"
    - "chown {{current_user}}:{{current_user}} /home/{{current_user}}/.kube/config"
  when: not kube.stat.exists

- name: Restart kubelet
  command: /bin/true
  notify: restart kubelet

- name: Waiting haproxy k8s to be ready
  wait_for:
    host: "{{groups['control_plane'][0]}}.lan"
    port: 6443
    delay: 0
    timeout: 2

- name: Wait for k8s to be ready
  wait_for:
    host: localhost
    port: 6443
    state: started
    timeout: 60

- name: Install pod network
  become: false
  command: kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
  when: not kube.stat.exists

- name: Get dns service address
  become: false
  command: kubectl get services --all-namespaces -ojsonpath='{.items[?(@.metadata.name=="kube-dns")].spec.clusterIP}'
  register: kubednsaddress

- debug:
    var: "{{ kubednsaddress.stdout }}"

- name: Wait for dns to be ready
  wait_for:
    host: "{{ kubednsaddress.stdout }}"
    port: 53
    state: started
    timeout: 1800

# - name: Kubectl bash completion
#   become: yes
#   shell: kubectl completion bash > /etc/bash_completion.d/kubectl
#   when: not kube.stat.exists

- name: Kubectl alias complete
  become: false
  lineinfile:
      path: ~/.bashrc
      line: "{{item}}"
      regex: "{{item}}"
      state: present
  with_items:
  - alias k=kubectl
  - complete -F __start_kubectl k
  when: not kube.stat.exists

