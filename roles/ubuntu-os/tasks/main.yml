- set_fact:
    mount_boot_path: "/media/{{inventory_hostname}}-sda1"
    mount_root_path: "/media/{{inventory_hostname}}-sda2"
    ansible_user: pi
    pxe_server: "{{groups['control_plane'][0]}}"
    pxe_user: "root"

- name: Include ssh initial
  vars:
    ssh_delay: "0" 
    ssh_timeout: "20"
    ssh_ping: true
    clean: true
  include_role:
    name: ssh
  when: ansible_distribution is not defined 
    or ansible_distribution is defined 
    and ansible_distribution == '' 

- name: Creates su directory
  become: yes
  file:
    path: "{{item}}"
    state: directory
  with_items:
    - "{{mount_boot_path}}"
    - "{{mount_root_path}}"
  when: >  
    "/media" in mount_boot_path
    and "/media" in mount_root_path 

- name: Creates directory
  file:
    path: "{{item}}"
    state: directory
    force: true
  with_items:
    - "{{ubuntu_img_dir}}"

- name: Gather facts from {{pxe_server}}
  ansible.builtin.setup:
  delegate_to: "{{pxe_server}}"
  connection: ssh
  vars:
    ansible_user: "root"

- name: Print ip from available facts
  ansible.builtin.debug:
    var: ansible_facts['all_ipv4_addresses'][0]

- name: Mount up ubuntu download
  become: yes
  shell: mount -t nfs "{{ansible_facts['all_ipv4_addresses'][0]}}:/srv/nfs/images" "{{ubuntu_img_dir}}"
  register: mount
  failed_when: >
    mount.rc != 0 
    and 'already mounted on' not in mount.stderr
    or 'not mounted.' in mount.stderr
  changed_when: >
    mount.rc == 0 

- name: Check if archive img exists
  delegate_to: "{{pxe_server}}"
  connection: ssh
  vars:
    ansible_user: "root"
  run_once: true
  stat:
    path: "/srv/nfs/images/ubuntu-23.10-preinstalled-server-arm64+raspi.img"
    get_checksum: no
    get_attributes: no
    get_mime: no
  register: img

- name: Download ubuntu image
  delegate_to: "{{pxe_server}}"
  connection: ssh
  vars:
    ansible_user: "root"
  run_once: true
  get_url:
    url: https://cdimage.ubuntu.com/releases/23.10/release/ubuntu-23.10-preinstalled-server-arm64+raspi.img.xz
    dest: "/srv/nfs/images"
  when: img.skipped is not defined and img.stat.exists == false

- name: Extract
  delegate_to: "{{pxe_server}}"
  connection: ssh
  vars:
    ansible_user: "root"
  run_once: true
  become: yes
  shell: xz -d /srv/nfs/images/ubuntu*.img.xz
  when: img.skipped is not defined and img.stat.exists == false

- name: Wipe disk
  become: yes
  shell: "{{item}}"
  register: wipe
  failed_when: >
    'umount' in item
    and  wipe.rc != 0
    and 'already mounted on' in wipe.stderr
    or
    'wipefs' in item
    and wipe.rc != 0
    or
    'dd' in item
    and wipe.rc != 0
    or
    'smartctl' in item
    and 'No Errors Logged' not in wipe.stdout
  changed_when: >
    wipe.rc == 0
  with_items:
    - smartctl -l error {{os_disk}}
    - umount {{os_disk}}*
    - wipefs -fa {{os_disk}}
    - dd if=/dev/zero of={{os_disk}} bs=1024 count=50
    - smartctl -l error {{os_disk}}

  when: clean

# smartctl -t long /dev/sda
# (make sure each test completes before running the next one).
# smartctl -t offline /dev/sda
# smartctl -x /dev/sda

- name: Read device information (always use unit when probing)
  become: yes
  parted: "device={{os_disk}} unit=MiB"
  register: dev_info

- name: Write to disk
  become: yes
  shell: dd bs=64k if={{ubuntu_img_dir}}/ubuntu-23.10-preinstalled-server-arm64+raspi.img of={{os_disk}} iflag=fullblock oflag=direct

- name: Check if os_disk exists
  stat: 
    path: "{{os_disk}}"
    get_checksum: no
    get_attributes: no
    get_mime: no
  register: os_disk_result
- debug:
    var: os_disk_result.changed, bootconfig_order.changed, bootconf_extract.changed

- name: Read device information (always use unit when probing)
  become: yes
  parted: "device={{os_disk}} unit=MiB"
  register: dev_info

- debug:
    var: dev_info

- name: Extend root part
  become: yes
  register: parted
  parted:
    device: "{{os_disk}}"
    number: 2
    part_end: "100%"
    resize: true
    state: present

- name: Check repair fs
  become: yes
  # shell: "e2fsck -pf {{os_disk}}{{item}}"
  shell: "e2fsck -p {{os_disk}}{{item}}"
  when: parted.changed
  with_items:
    - 2

- name: Check fs
  become: yes
  # shell: "e2fsck -pf {{os_disk}}{{item}}"
  shell: "e2fsck -fp {{os_disk}}{{item}}"
  when: parted.changed
  with_items:
    - 2

- name: Resize fs
  become: yes
  shell: "resize2fs {{os_disk}}{{item}}"
  when: parted.changed
  with_items:
    - 2

- name: Read device information (always use unit when probing)
  become: yes
  parted: "device={{os_disk}} unit=GiB"
  register: dev_info

- debug:
    var: dev_info
    
- name: Mount up ubuntu disk boot partition
  become: yes
  shell: mount "{{os_disk}}1" "{{mount_boot_path}}"
  register: mount
  when: >
    "/media" in mount_boot_path 
  failed_when: >
    mount.rc != 0 
    and 'already mounted on' not in mount.stderr
    or 'not mounted.' in mount.stderr
  changed_when: >
    mount.rc == 0  
    
- name: Mount up ubuntu disk root partition
  become: yes
  shell: mount "{{os_disk}}2" "{{mount_root_path}}"
  register: mount2
  when: >
    "/media" in mount_root_path 
  failed_when: >
    mount2.rc != 0 
    and 'already mounted on' not in mount2.stderr
    or 'not mounted.' in mount2.stderr
  changed_when: >
    mount2.rc == 0  
 
- set_fact:
    id_rsa_path: "{{lookup('env','HOME')}}/.ssh/id_rsa.pub"
    when: img.skipped is not defined and img.stat.exists == false
- name: Set id rsa contents
  set_fact:
    id_rsa_contents: "{{ lookup('file', id_rsa_path) }}"

# - pause: cloud-init schema --config-file "{{mount_root_path}}/etc/cloud/cloud.cfg"; cloud-init schema --system; cat /var/log/cloud-init-output.log
- name: Create custom cloud init
  become: yes
  template:
    src: cloud.yml.j2
    dest: "{{mount_root_path}}/etc/cloud/cloud.cfg"

- name: Create custom user data
  become: yes
  template:
    src: user-data.yml.j2
    dest: "{{mount_boot_path}}/user-data"
# - pause:

# - name: Creating autologin file with content
#   become: yes
#   lineinfile:
#     mode: 0644
#     name: "{{mount_root_path}}/etc/systemd/system/getty@tty1.service.d/override.conf"
#     line: "{{item}}"
#     create: yes
#   with_items: >
#     [Service]
#       Type=simple
#       ExecStart=
#       ExecStart=-/sbin/agetty --autologin ubuntu --noclear %I 38400 linux

# - name: Disable Bluetooth and WiFi
#   become: yes
#   lineinfile:
#     path: "{{mount_boot_path}}/boot/firmware/config.txt"
#     line: "{{item}}"
#     regex: "{{item}}"
#     state: present
#   register: _config
#   with_items:
#   - dtoverlay=disable-wifi
#   - dtoverlay=disable-bt

- name: Include distribution switch to Ubuntu
  vars:
    distribution: "Ubuntu"
    clean: true
    distribution_ssh_delay_initial: 1
    distribution_ssh_timeout_initial: 1
    distribution_ssh_user_after_reboot: ubuntu
    distribution_ssh_delay: 30
    distribution_ssh_timeout: 90
    distribution_setup_ssh_ping: true
  include_role:
    name: distribution-switch