- name: Include distribution switch prefered Ubuntu fallback Debian
  include_role:
    name: distribution-switch
  vars:
    distribution: "Ubuntu"
    distribution_ssh_delay_initial: 0 
    distribution_ssh_timeout_initial: 10
    distribution_ssh_delay: 5
    distribution_ssh_timeout: 60
    distribution_setup_ssh_ping: false
    distribution_setup_ssh_after_sshpass_initial: true
    distribution_setup_ssh_after_sshpass: true

- set_fact:
    mount_boot_path: "/media/{{inventory_hostname}}-debian-sda1"
    mount_root_path: "/media/{{inventory_hostname}}-debian-sda2"
    root_path: "/srv/nfs/rpi4-{{node_serial}}"
    boot_path: "/srv/tftp/{{node_serial}}"

- name: Fallback Reboot {{inventory_hostname}} raspberry
  shell: /sbin/shutdown -r now "Ansible system" || true
  async: 1
  poll: 0
  become: yes
  when: > 
    ssh_con.failed == false
    and ansible_distribution != "Ubuntu"
  register: fallback_reboot_raspberry

- name: Clean boot path
  delegate_to: pxe-server
  connection: ssh
  vars:
    ansible_user: ubuntu
  become: yes
  file:
    state: absent
    path: "{{boot_path}}/"
  when: > 
      ssh_con.failed
      or clean_boot 
      or clean

- name: Remove Exports configuration
  delegate_to: pxe-server
  connection: ssh
  vars:
    ansible_user: ubuntu
  become: yes
  lineinfile:
    path: "/etc/exports"
    line: "{{item}}"
    state: absent
  register: _exports
  with_items:
  - "{{root_path}} *(rw,sync,no_subtree_check,no_root_squash)"
  - "{{boot_path}} *(rw,sync,no_subtree_check,no_root_squash)"  
  notify:
    - exports_reload

- meta: flush_handlers

- name: Wait for fallback reboot
  pause:
    seconds: 20
  when: fallback_reboot_raspberry.changed

- name: Clean root path
  delegate_to: pxe-server
  connection: ssh
  vars:
    ansible_user: ubuntu
  become: yes
  file:
    state: absent
    path: "{{root_path}}/"
  when: >
    clean_root 
    or clean

- name: Creates tmp directory
  run_once: true
  delegate_to: pxe-server
  connection: ssh
  vars:
    ansible_user: ubuntu
  file:
    path: "{{item}}"
    state: directory
    force: true
  with_items:
    - "{{raspios_img_dir}}"
    
- name: Creates media, tftp and nfs directory
  delegate_to: pxe-server
  connection: ssh
  become: yes
  vars:
    ansible_user: ubuntu
  file:
    path: "{{item}}"
    state: directory
    force: true
  with_items:
    - "{{mount_boot_path}}"
    - "{{mount_root_path}}"
    - "{{boot_path}}"
    - "{{root_path}}"

- name: Check if raspbian os img exists
  run_once: true
  delegate_to: pxe-server
  connection: ssh
  vars:
    ansible_user: ubuntu
  find: 
    paths: "{{raspios_img_dir}}"
    patterns: raspbianos.img
  register: osimg

- name: Unarchive a file that needs to be downloaded
  run_once: true
  delegate_to: pxe-server
  connection: ssh
  vars:
    ansible_user: ubuntu
  unarchive:
    src:  https://downloads.raspberrypi.org/raspios_lite_armhf_latest
    dest: "{{raspios_img_dir}}"
    remote_src: yes
  when: osimg.matched == 0

- name: Rename file
  run_once: true
  delegate_to: pxe-server
  connection: ssh
  vars:
    ansible_user: ubuntu
  shell: "mv {{raspios_img_dir}}/*.img {{raspios_img_dir}}/raspbianos.img"
  when: osimg.matched == 0

- name: Mount img
  run_once: true
  delegate_to: pxe-server
  connection: ssh
  vars:
    ansible_user: ubuntu
  become: yes
  shell: "x=$(kpartx -a -v {{raspios_img_dir}}/raspbianos.img | awk '{print $3}'); echo $x  | cut -d' ' -f1 |rev| cut -c3- | rev"
  register: partx_result

- debug:
    var: mount_boot_path, mount_root_path
- name: Mount up boot
  delegate_to: pxe-server
  connection: ssh
  vars:
    ansible_user: ubuntu
  become: yes
  shell: mount "/dev/mapper/{{partx_result.stdout}}p1" "{{mount_boot_path}}"
  register: mount
  when: >
    "/media" in mount_boot_path 
  failed_when: >
    mount.rc != 0 
    and 'already mounted on' not in mount.stderr
    or 'not mounted.' in mount.stderr
  changed_when: >
    mount.rc == 0  

- name: Mount up root
  delegate_to: pxe-server
  connection: ssh
  vars:
    ansible_user: ubuntu
  become: yes
  shell: mount "/dev/mapper/{{partx_result.stdout}}p2" "{{mount_root_path}}"
  register: mount
  when: >
    "/media" in mount_root_path 
  failed_when: >
    mount.rc != 0 
    and 'already mounted on' not in mount.stderr
    or 'not mounted.' in mount.stderr
  changed_when: >
    mount.rc == 0  

- name: Copy root into place.
  delegate_to: pxe-server
  connection: ssh
  vars:
    ansible_user: ubuntu
  become: yes
  shell: rsync -azr "{{mount_root_path}}/" "{{root_path}}/"

- name: Copy boot into place.
  delegate_to: pxe-server
  connection: ssh
  vars:
    ansible_user: ubuntu
  become: yes
  shell: rsync --exclude *.elf --exclude *.dat -azr "{{mount_boot_path}}/" "{{boot_path}}/"

- name: Disable Bluetooth and WiFi
  delegate_to: pxe-server
  connection: ssh
  vars:
    ansible_user: ubuntu
  become: yes
  lineinfile:
    path: "{{boot_path}}/config.txt"
    line: "{{item}}"
    regex: "{{item}}"
    state: present
  register: _config
  with_items:
  - dtoverlay=disable-wifi
  - dtoverlay=disable-bt

- name: Cleanup boot configuration
  delegate_to: pxe-server
  connection: ssh
  vars:
    ansible_user: ubuntu
  become: yes
  lineinfile:
    path: "{{boot_path}}/cmdline.txt"
    regexp: "UUID=\\d"
    state: absent

- name: Cleanup fstab
  delegate_to: pxe-server
  connection: ssh
  vars:
    ansible_user: ubuntu
  become: yes
  lineinfile:
    path: "{{root_path}}/etc/fstab"
    regexp: "UUID=\\d"
    state: absent

- name: Enable ssh
  delegate_to: pxe-server
  connection: ssh
  vars:
    ansible_user: ubuntu
  become: yes
  file: 
    path: "{{item}}"
    state: touch
  register: ssh
  with_items:
    - "{{boot_path}}/ssh"
    - "{{root_path}}/boot/ssh" 

- name: Plug {{inventory_hostname}} device and continue
  connection: local
  delegate_to: localhost
  become: false
  pause:
    seconds: 300
  when:  ansible_distribution is not defined

- debug:
    var: ansible_distribution
  when: ansible_distribution is defined

- name: fstab configuration
  delegate_to: pxe-server
  connection: ssh
  vars:
    ansible_user: ubuntu
  become: yes
  lineinfile:
    path: "{{root_path}}/etc/fstab"
    line: "{{item}}"
    regex: "{{item}}"
    state: present
  register: _fstab
  with_items:
  - "{{pxe_host}}:{{boot_path}} /boot nfs defaults,vers=4.1,proto=tcp 0 0"

- name: Boot configuration
  delegate_to: pxe-server
  connection: ssh
  vars:
    ansible_user: ubuntu
  become: yes
  lineinfile:
    path: "{{boot_path}}/cmdline.txt"
    line: "{{item}}"
    regex: "{{item}}"
    state: present
  register: _cmdline
  with_items:
  - "console=serial0,115200 console=tty1 root=/dev/nfs nfsroot={{pxe_host}}:{{root_path}},vers=4.1,proto=tcp rw ip=dhcp rootwait elevator=deadline"

- name: Exports configuration
  delegate_to: pxe-server
  connection: ssh
  vars:
    ansible_user: ubuntu
  become: yes
  lineinfile:
    path: "/etc/exports"
    line: "{{item}}"
    regex: "{{item}}"
    state: present
  register: _exports
  with_items:
  - "{{root_path}} *(rw,sync,no_subtree_check,no_root_squash)"
  - "{{boot_path}} *(rw,sync,no_subtree_check,no_root_squash)"   
  notify:
    - exports_reload

- name: Copy dat and elf files into place.
  delegate_to: pxe-server
  connection: ssh
  vars:
    ansible_user: ubuntu
  become: yes
  shell: rsync --include *.elf --include *.dat --exclude=* -azr "{{mount_boot_path}}/" "{{boot_path}}/"

- meta: flush_handlers

- name: Verify Copy dat and elf files into place.
  delegate_to: pxe-server
  connection: ssh
  vars:
    ansible_user: ubuntu
  become: yes
  shell: ls  {{boot_path}}/*.elf

- name: Include distribution switch to RaspiOS
  vars:
    distribution: "Debian"
    clean: false
    distribution_ssh_delay: "{%if  ansible_distribution == ''%}30{%else%}5{%endif%}" 
    distribution_ssh_timeout: "{%if ansible_distribution == '' %}300{%else%}120{%endif%}"
    distribution_ssh_delay_initial: "{%if  ansible_distribution == ''%}30{%else%}5{%endif%}" 
    distribution_ssh_timeout_initial: "{%if ansible_distribution == '' %}300{%else%}120{%endif%}"
    distribution_setup_ssh_ping: true
    distribution_setup_ssh_after_sshpass_initial: true
    distribution_setup_ssh_after_sshpass: true
    skip_clean_ubuntu: true
  include_role:
    name: distribution-switch
