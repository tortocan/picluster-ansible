- set_fact:
    mount_root_path: "/media/{{inventory_hostname}}"
    pxe_server: "{{groups['control_plane'][0]}}"
    id_rsa_path: "{{lookup('env','HOME')}}/.ssh/id_rsa.pub"

- name: Creates img directory
  run_once: true
  delegate_to: "{{item}}"
  connection: ssh
  vars:
    ansible_user: "root"
  file:
    path: "{{pxe_img_dir}}"
    state: directory
    force: true
  with_items:
    - "{{pxe_server}}"

- name: Creates directory
  run_once: true
  become: yes
  file:
    path: "{{item}}"
    state: directory
    force: true
  with_items:
    - "{{pxe_img_dir}}"
    - "{{mount_root_path}}"

- name: Check if img exists
  run_once: true
  delegate_to: "{{pxe_server}}"
  connection: ssh
  vars:
    ansible_user: "root"
  find:
    paths: "{{pxe_img_dir}}"
    patterns: raspios.img
  register: osimg

- name: Download img
  run_once: true
  delegate_to: "{{pxe_server}}"
  connection: ssh
  vars:
    ansible_user: "root"
  unarchive:
    src: https://downloads.raspberrypi.org/raspios_lite_armhf/images/raspios_lite_armhf-2021-11-08/2021-10-30-raspios-bullseye-armhf-lite.zip
    dest: "{{pxe_img_dir}}"
    remote_src: yes
  when: osimg.matched == 0

- name: Rename file
  run_once: true
  delegate_to: "{{pxe_server}}"
  connection: ssh
  vars:
    ansible_user: "root"
  shell: "mv {{pxe_img_dir}}/*raspios*.img {{pxe_img_dir}}/raspios.img"
  when: osimg.matched == 0

- name: Mount up img download
  become: yes
  shell: mount -t nfs "{{pxe_server}}:/srv/nfs/images" "{{pxe_img_dir}}"
  register: mount
  failed_when: >
    mount.rc != 0
    and 'already mounted on' not in mount.stderr
    or 'not mounted.' in mount.stderr
  changed_when: >
    mount.rc == 0

- name: Wipe disk
  become: yes
  shell: umount {{os_disk}}*; wipefs -a {{os_disk}}
  when: clean

- name: Read device information (always use unit when probing)
  become: yes
  parted: "device={{os_disk}} unit=MiB"
  register: dev_info

- debug:
    var: dev_info


- name: Write to disk
  become: yes
  shell: dd bs=64k if={{pxe_img_dir}}/raspios.img of={{os_disk}} iflag=fullblock oflag=direct
  when: dev_info.partitions | count != 2


- name: Read device information (always use unit when probing)
  become: yes
  parted: "device={{os_disk}} unit=MiB"
  register: dev_info

- debug:
    var: dev_info

- name: Extend root part
  become: yes
  register: parted
  parted:
    device: "{{os_disk}}"
    number: 2
    part_end: "100%"
    resize: true
    state: present

- name: Check repair fs
  become: yes
  # shell: "e2fsck -pf {{os_disk}}{{item}}"
  shell: "e2fsck -p {{os_disk}}{{item}}"
  when: parted.changed
  with_items:
    - 2

- name: Check fs
  become: yes
  # shell: "e2fsck -pf {{os_disk}}{{item}}"
  shell: "e2fsck -fp {{os_disk}}{{item}}"
  when: parted.changed
  with_items:
    - 2

- name: Resize fs
  become: yes
  shell: "resize2fs {{os_disk}}{{item}}"
  when: parted.changed
  with_items:
    - 2

- name: Read device information (always use unit when probing)
  become: yes
  parted: "device={{os_disk}} unit=GiB"
  register: dev_info

- debug:
    var: dev_info

- name: Mount up disk root partition
  become: yes
  shell: mount "{{os_disk}}2" "{{mount_root_path}}"
  register: mount2
  when: >
    "/media" in mount_root_path
  failed_when: >
    mount2.rc != 0
    and 'already mounted on' not in mount2.stderr
    or 'not mounted.' in mount2.stderr
  changed_when: >
    mount2.rc == 0

- name: Mount up disk boot partition
  become: yes
  shell: mount "{{os_disk}}1" "{{mount_root_path}}/boot"
  register: mount
  when: >
    "/media" in mount_root_path
  failed_when: >
    mount.rc != 0
    and 'already mounted on' not in mount.stderr
    or 'not mounted.' in mount.stderr
  changed_when: >
    mount.rc == 0

- name: Inform the DHCP server of our hostname for DDNS.
  become: yes
  run_once: true
  replace:
    path: "{{mount_root_path}}/etc/dhcpcd.conf"
    regexp: "#hostname"
    replace: "hostname"

# - name: Disable WPA supplicant.
#   become: yes
#   run_once: true
#   lineinfile:
#     path: "{{mount_root_path}}/etc/dhcpcd.conf"
#     line: "nohook wpa_supplicant"
#     regex: "nohook wpa_supplicant"

- name: Set id rsa contents
  set_fact:
    id_rsa_contents: "{{ lookup('file', id_rsa_path) }}"

- name: Create custom img script
  become: yes
  run_once: true
  template:
    src=custom-img.sh.j2
    dest="/{{mount_root_path}}/custom-img.sh"
    owner=root
    group=root
    mode=0544

- name: Enter chroot run custom-img.sh
  run_once: true
  become: yes
  shell: chroot "{{mount_root_path}}" /bin/bash -c 'chmod +x ./custom-img.sh;./custom-img.sh && exit'
  register: chroot

- debug:
    var: chroot.stdout_lines[0]

- name: Set hostname
  become: yes
  lineinfile:
    path: "{{mount_root_path}}/etc/hostname"
    line: "{{item}}"
    regex: "raspberry"
    state: present
  with_items:
    - "{{inventory_hostname}}"

- name: Set hosts hostname
  become: yes
  lineinfile:
    path: "{{mount_root_path}}/etc/hosts"
    line: "127.0.0.1 {{item}}"
    regex: "raspberry"
    state: present
  with_items:
    - "{{inventory_hostname}}"

- name: Set configuration
  become: yes
  lineinfile:
    path: "{{mount_root_path}}/boot/config.txt"
    line: "{{item}}"
    regex: "{{item}}"
    state: present
  register: _config
  with_items:
  - dtoverlay=disable-wifi
  - dtoverlay=disable-bt
  - arm_64bit=1

- name: Enable ssh
  become: yes
  file:
    path: "{{item}}"
    state: touch
  register: ssh
  with_items:
    - "{{mount_root_path}}/boot/ssh"

- name: Include distribution switch to Raspbian OS
  vars:
    distribution: "Debian"
    clean: true
    distribution_ssh_delay_initial: 0
    distribution_ssh_timeout_initial: 120
    distribution_setup_ssh_after_sshpass_initial: true
    distribution_ssh_user_after_reboot: "{{Debian_user}}"
    distribution_ssh_delay: 0
    distribution_ssh_timeout: 90
    distribution_setup_ssh_ping: true
    force_pxe_boot_state: true
  include_role:
    name: distribution-switch