
- name: Include ssh initial
  vars:
    ssh_delay: "{{distribution_ssh_delay_initial}}"
    ssh_timeout: "{{distribution_ssh_timeout_initial}}"
    ssh_ping: true
    clean: false
  include_role:
    name: ssh
  when: ansible_distribution is not defined
    or ansible_distribution is defined
    and ansible_distribution == ''


# - name: save all facts to host specific file
#   copy:
#     content: "{{ host_setup.ansible_facts.ansible_distribution | to_nice_json }}"
#     dest: "{{ playbook_dir }}/f.json"
#   delegate_to: localhost


- name: Get boot mount
  shell: mount
  delegate_to: "{{inventory_hostname}}"
  connection: ssh
  register: mount
  vars:
    ansible_user: "{{ssh_user}}"
  when: >
    scan_known_host is defined

- set_fact:
    netboot: "{% if mount.stdout is search('on /boot type nfs4') %}true{%else%}false{%endif%}"

- name: Extract bootconf
  become: yes
  shell: rpi-eeprom-config > ./bootconf.txt
  register: bootconf_extract
  changed_when: false
  when: ansible_distribution == pi_distribution

- name: Check bootconfig boot order
  lineinfile:
    path: ./bootconf.txt
    line: "BOOT_ORDER={{boot_order}}"
    state: present
  check_mode: yes
  register: bootconfig_order
  when: >
    bootconf_extract.skipped is defined == false

- name: Check if os_disk1 exists
  stat:
    path: "{{os_disk}}1"
    get_checksum: no
    get_attributes: no
    get_mime: no
  register: os_disk1
  when: ansible_distribution == pi_distribution

- set_fact:
    os_disk1_stat_exists: "{{os_disk1.stat.exists is defined and os_disk1.stat.exists or ansible_distribution is defined and ansible_distribution != pi_distribution}}"
- debug:
    var: ansible_distribution,os_disk1_stat_exists, os_disk1.changed, bootconfig_order.changed, bootconf_extract.changed

- set_fact:
    mount_boot_path: "{% if netboot == false %}{%else%}/media/{{inventory_hostname}}-ds-sda1{%endif%}"

- name: Creates mount point directories
  become: yes
  file:
    path: "{{item}}"
    state: directory
    force: true
  with_items:
    - "{{mount_boot_path}}"
  when: netboot

- name: Mount up usb disk boot partition
  become: yes
  shell: mount "{{os_disk}}1" "{{mount_boot_path}}"
  register: mount
  when: netboot
    and os_disk1_stat_exists is defined
    and os_disk1_stat_exists
    and ansible_distribution is defined
    and ansible_distribution == pi_distribution
  failed_when: mount.rc != 0
    and 'already mounted on' not in mount.stderr
    or 'not mounted.' in mount.stderr
  changed_when: false

- name: Scan boot path
  stat:
    path: "{{mount_boot_path}}/boot/firmware"
    get_checksum: no
    get_attributes: no
    get_mime: no
  register: boot_path_firmware

- debug:
    var: netboot,mount_boot_path, ansible_distribution, boot_path_firmware

- name: Set elf path
  set_fact:
    elf_path: "{% if boot_path_firmware.stat.exists %}{{mount_boot_path}}/boot/firmware{%else%}{{mount_boot_path}}{%endif%}"

- debug:
    var: elf_path

- name: Enable usb boot
  become: yes
  shell: mv "{{item}}.disable" "{{item}}"
  register: enable_usb_boot
  with_items:
    - "{{elf_path}}/start.elf"
    - "{{elf_path}}/start4.elf"
  failed_when: >
    enable_usb_boot.rc != 0
    and enable_usb_boot.stderr.find('No such file or directory') > -1 == false
  changed_when: >
    enable_usb_boot.rc == 0
  when: >
    ansible_distribution is defined
    and netboot == true

- name: Disable usb boot
  become: yes
  connection: ssh
  vars:
    ansible_user: "{{ssh_user}}"
  shell: mv "{{item}}" "{{item}}.disable"
  with_items:
    - "{{elf_path}}/start.elf"
    - "{{elf_path}}/start4.elf"
  register: disable_usb_boot
  failed_when: >
    disable_usb_boot.rc != 0
    and disable_usb_boot.stderr.find('No such file or directory') > -1 == false
  changed_when: >
    disable_usb_boot.rc == 0
    and disable_usb_boot.stderr.find('No such file or directory') > -1 == false
  when: >
    ping.failed is defined
    and ping.failed == false
    and ansible_distribution is defined
    and netboot == false
# - pause:

- name: Reboot {{inventory_hostname}} device
  shell: sleep 3 && /sbin/shutdown -r now "Ansible system" || true
  async: 1
  poll: 0
  become: yes
  connection: ssh
  vars:
    ansible_user: "{{ssh_user}}"
  when: >
   ansible_distribution is defined
  register: reboot_device

- debug:
    var: current_known_distribution, ansible_distribution, distribution

- name: pause for 60
  ansible.builtin.pause:
    seconds: 60

- name: Include ssh on reboot
  include_role:
    name: ssh
  vars:
    clean: true
    ssh_delay:  "{{ distribution_ssh_delay | int }}"
    ssh_timeout: "{{ distribution_ssh_timeout | int }}"
    ssh_ping: "{{distribution_setup_ssh_ping | bool}}"
    setup_ssh_after_sshpass: "{{distribution_setup_ssh_after_sshpass | bool}}"
  when:
    reboot_device.changed

- name: Clear facts when boot state is disabled
  meta: clear_facts
  when:
    reboot_device.changed

- name: Gather facts from {{inventory_hostname}}
  setup:
  when:
    reboot_device.changed
