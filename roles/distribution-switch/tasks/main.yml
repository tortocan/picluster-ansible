- name: Is ssh responding
  ignore_errors: true
  ignore_unreachable: true
  local_action: wait_for host={{inventory_hostname}} port=22 delay={{distribution_ssh_delay_initial}} connect_timeout={{distribution_ssh_timeout_initial}} timeout={{distribution_ssh_timeout_initial}}
  become: false
  delegate_to:  localhost
  connection: local
  register: ssh_con

- name: SSH key scan known host
  ignore_errors: true
  ignore_unreachable: true
  delegate_to: localhost
  become: false
  connection: local
  shell:  ssh-keyscan -T10 {{item}}  #host=$(ssh-keyscan -H {{item}} 2>&1|head -n 1|awk '{print $4}'|tr -s '-'|cut -d '-' -f 1); echo $host
  register: scan_known_host
  with_items:
    - "{{ansible_host | default(inventory_hostname)}}"
  when: ssh_con is defined
  changed_when: false

- name: Set current known distribution
  set_fact:
    current_known_distribution: "{% if scan_known_host.results | map(attribute='stderr') is search('Raspbian') %}Debian{% elif scan_known_host.results | map(attribute='stderr') is search('Ubuntu')%}Ubuntu{% elif scan_known_host.results | map(attribute='stderr') is search(ansible_host| default(inventory_hostname))%}Archlinux{%else%}{% endif %}"

- name: Set user
  set_fact:
    ssh_user: "{{vars[current_known_distribution + '_user']}}"
  register: set_ssh_user
  when: current_known_distribution is defined
    and current_known_distribution != ''

- name: Set become pass
  set_fact:
    ssh_pass: "{{vars[ssh_user + '_password']}}"
    ansible_become_pass: "{{vars[ssh_user + '_password']}}"
    cacheable: no
  when: current_known_distribution is defined
    and current_known_distribution != ''

- name: Gather facts from {{inventory_hostname}}
  ansible.builtin.setup:
  delegate_to: "{{inventory_hostname}}"
  connection: ssh
  vars:
    ansible_user: "{{ssh_user}}"
  when: >
    scan_known_host is defined

- name: Get boot
  shell: mount
  delegate_to: "{{inventory_hostname}}"
  connection: ssh
  register: mount
  vars:
    ansible_user: "{{ssh_user}}"
  when: >
    scan_known_host is defined

- set_fact:
    ansible_user: "{{ssh_user}}"
    netboot: "{% if mount.stdout is search('on /boot type nfs4') %}true{%else%}false{%endif%}"

- debug:
    var: netboot

- debug:
    var: current_known_distribution, distribution, ansible_distribution, ssh_user

- set_fact:
    pxe_server: "{{groups['control_plane'][0]}}"
    pxe_user: "root"

- set_fact:
    mount_boot_path: "{%if ansible_distribution is defined and ansible_distribution == 'Ubuntu'%}/boot/firmware{%elif ansible_distribution is defined %}/media/{{inventory_hostname}}-{{current_known_distribution}}-sda1{%else%}/boot{%endif%}"
    mount_root_path: "{%if ansible_distribution is defined and ansible_distribution == 'Ubuntu'%}/root{%elif ansible_distribution is defined %}/media/{{inventory_hostname}}-{{current_known_distribution}}-sda2{%else%}/boot{%endif%}"
  when: >
    ssh_con is defined
    and ssh_con.failed == false
    and ansible_distribution == pi_distribution

- name: Creates directory
  become: yes
  file:
    path: "{{item}}"
    state: directory
  with_items:
    - "{{mount_boot_path}}"
    - "{{mount_root_path}}"
  when: >
    ssh_con is defined
    and ssh_con.failed == false
    and ansible_distribution != ""
    and ansible_distribution == pi_distribution

- name: Extract bootconf
  become: yes
  shell: rpi-eeprom-config > ./bootconf.txt
  register: bootconf_extract
  changed_when: false
  when:
    ssh_con is defined
    and ssh_con.failed == false
    and ansible_distribution == pi_distribution

- name: Check bootconfig boot order
  lineinfile:
    path: ./bootconf.txt
    line: "BOOT_ORDER={{boot_order}}"
    state: present
  check_mode: yes
  register: bootconfig_order
  when: >
    bootconf_extract.skipped is defined == false

- name: Check if os_disk1 exists
  stat:
    path: "{{os_disk}}1"
  register: os_disk1
  when: >
    ssh_con is defined
    and ssh_con.failed == false
    and ansible_distribution == pi_distribution

- set_fact:
    os_disk1_stat_exists: "{{os_disk1.stat.exists is defined and os_disk1.stat.exists or ansible_distribution is defined and ansible_distribution != pi_distribution}}"
- debug:
    var: os_disk1_stat_exists, os_disk1.changed, bootconfig_order.changed, bootconf_extract.changed

- name: Mount up usb disk boot partition
  become: yes
  shell: mount "{{os_disk}}1" "{{mount_boot_path}}"
  register: mount
  when: >
    os_disk1.skipped is not defined
    and os_disk1_stat_exists
    and "/media" in mount_boot_path
    and "/media" in mount_root_path
  failed_when: >
    mount.rc != 0
    and 'already mounted on' not in mount.stderr
    or 'not mounted.' in mount.stderr
  changed_when: false

- name: Enable usb boot
  become: yes
  shell: mv "{{item}}.disable" "{{item}}"
  register: enable_usb_boot
  with_items:
    - "{{mount_boot_path}}/start.elf"
    - "{{mount_boot_path}}/start4.elf"
  failed_when: >
    enable_usb_boot.rc != 0
    and enable_usb_boot.stderr.find('No such file or directory') > -1 == false
  changed_when: >
    enable_usb_boot.rc == 0
  when: >
    ansible_distribution is defined
    and ansible_distribution == pi_distribution
    and netboot == true

- debug:
    var: ssh_con, ansible_distribution


- name: Disable usb boot
  become: yes
  connection: ssh
  vars:
    ansible_user: "{{ssh_user}}"
  shell: mv "{{item}}" "{{item}}.disable"
  with_items:
    - "/boot/start.elf"
    - "/boot/start4.elf"
  register: disable_usb_boot
  failed_when: >
    disable_usb_boot.rc != 0
    and disable_usb_boot.stderr.find('No such file or directory') > -1 == false
  changed_when: >
    disable_usb_boot.rc == 0
    and disable_usb_boot.stderr.find('No such file or directory') > -1 == false
  when: >
    ssh_con is defined
    and ssh_con.failed == false
    and ansible_distribution is defined
    and netboot == false

- name: Reboot {{inventory_hostname}} device
  shell: sleep 3 && /sbin/shutdown -r now "Ansible system" || true
  async: 1
  poll: 0
  become: yes
  connection: ssh
  vars:
    ansible_user: "{{ssh_user}}"
  when: >
    ssh_con is defined
    and ssh_con.failed == false
    and os_disk1_stat_exists == (ansible_distribution != '')
    and ansible_distribution is defined
  register: reboot_device

- debug:
    var: current_known_distribution, ansible_distribution, distribution, default_distribution

- name: pause for 60
  ansible.builtin.pause:
    seconds: 60

- name: Include ssh on reboot
  include_role:
    name: ssh
  vars:
    clean: true
    ssh_delay: "2"
    ssh_timeout: "{{ distribution_ssh_timeout | int }}"
    ssh_ping: "{{distribution_setup_ssh_ping | bool}}"
    setup_ssh_after_sshpass: "{{distribution_setup_ssh_after_sshpass | bool}}"
  when:
    reboot_device.changed

- name: Clear facts when boot state is disabled
  meta: clear_facts
  when:
    reboot_device.changed
    and enable_usb_boot.skipped == false